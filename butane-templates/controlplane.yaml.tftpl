# code: language=yaml
variant: fcos
version: 1.5.0

passwd:
  users:
    - name: ${ssh_admin_username}
      groups: ["wheel", "sudo", "systemd-journal"]
      ssh_authorized_keys:
        - ${ssh_authorized_key}

storage:
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: ${hostname}

    - path: /etc/vconsole.conf
      mode: 0644
      contents:
        inline: KEYMAP=${keymap}

    - path: /etc/yum.repos.d/rancher-k3s-common.repo
      mode: 0644
      contents:
        inline: |
          [rancher-k3s-common-stable]
          name=Rancher K3s Common (stable)
          baseurl=https://rpm.rancher.io/k3s/stable/common/centos/8/noarch
          enabled=1
          gpgcheck=1
          repo_gpgcheck=0
          gpgkey=https://rpm.rancher.io/public.key

    - path: /usr/local/bin/k3s
      overwrite: true
      mode: 0755
      contents:
        source: "${k3s_download_url}"
        verification:
          hash: "${k3s_download_hash}"

    - path: /etc/rancher/k3s/kubelet.config
      mode: 0640
      contents:
        inline: |
          ${indent(10, kubelet_config)}

    - path: /etc/rancher/k3s/config.yaml
      mode: 0644
      contents:
        inline: |
          write-kubeconfig-mode: "0644"

          %{ if init_cluster == true }
          cluster-init: true
          %{ endif }

          flannel-backend: none

          disable-network-policy: true
          disable-kube-proxy: true
          
          
          disable:
            - traefik
            - servicelb
            - local-storage
          
          node-taint:
            - "CriticalAddonsOnly=true:NoExecute"

          kubelet-arg:
            - "--config=/etc/rancher/k3s/kubelet.config"
            - "--feature-gates=GracefulNodeShutdown=true"

    - path: /etc/profile.d/kubectl.sh
      mode: 0755
      contents:
        inline: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          test -f /usr/local/bin/k3s && source <(kubectl completion bash)
          test -f /usr/local/bin/helm && source <(helm completion bash)

    %{~ if init_cluster == true ~}
    - path: /usr/local/bin/helm-install.sh
      mode: 0750
      contents:
        inline: |
          #!/bin/bash
          set -e
          set -o pipefail

          curl -L https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz \
            | tar xzf - -C /usr/local/bin --strip-components=1 linux-amd64/helm
    %{~ endif }

    %{~ if init_cluster == true ~}
    - path: /usr/local/bin/kubeseal-install.sh
      mode: 0750
      contents:
        inline: |
          #!/bin/bash
          set -e
          set -o pipefail

          curl -L https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.26.2/kubeseal-0.26.2-linux-amd64.tar.gz \
            | tar xzf - -C /usr/local/bin kubeseal
    %{~ endif }

    %{~ if init_cluster == true ~}
    - path: /usr/local/bin/cilium-install.sh
      mode: 0750
      contents:
        inline: |
          #!/bin/bash
          set -e
          set -o pipefail

          export HOME=/root
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

          curl -L https://github.com/cilium/cilium-cli/releases/download/v0.16.4/cilium-linux-amd64.tar.gz | tar xzf - -C /usr/local/bin

          until kubectl cluster-info > /dev/null 2>&1; do
            sleep 1
          done

          values=$(mktemp)

          cat <<EOF > "$values"
          kubeProxyReplacement: true
          k8sServiceHost: $(dig $(hostname) +short)
          k8sServicePort: 6443

          encryption:
            enabled: true
            type: wireguard

          ipam:
            operator:
              clusterPoolIPv4PodCIDRList: "10.42.0.0/16"

          operator:
            replicas: 1
          EOF

          cilium install --version 1.15.3 --values "$values"
          cilium status --wait
    %{~ endif }

    - path: /etc/rancher/k3s/agent-token
      mode: 0600
      contents:
        inline: "${agent_token}"

    - path: /etc/systemd/system/k3s.env
      mode: 0644
      contents:
        inline: |
          K3S_AGENT_TOKEN_FILE=/etc/rancher/k3s/agent-token
    
    - path: /etc/zincati/config.d/99-update-strategy.toml
      mode: 0644
      contents:
        inline: |
          ${indent(10, zincati_update_strategy)}
    
    %{~ if init_cluster == true ~}
    - path: /usr/local/bin/fleet-install.sh
      mode: 0750
      contents:
        inline: |
          #!/bin/bash
          set -e
          set -o pipefail

          export HOME=/root
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

          helm -n cattle-fleet-system install --create-namespace --wait \
              fleet-crd https://github.com/rancher/fleet/releases/download/v0.9.2/fleet-crd-0.9.2.tgz

          helm -n cattle-fleet-system install --create-namespace \
              fleet https://github.com/rancher/fleet/releases/download/v0.9.2/fleet-0.9.2.tgz
          
          kubectl apply -f - << "EOF"
          ${indent(10, initial_fleet_repo_yaml)}
          EOF
    %{ endif }

    %{~ if init_cluster == true && sealed_secrets_cert != "" && sealed_secrets_key != "" ~}
    - path: /var/tmp/sealed-secrets.crt
      mode: 0600
      user:
        id: 0
      group:
        id: 0
      contents:
        inline: |
          ${indent(10, sealed_secrets_cert)}

    - path: /var/tmp/sealed-secrets.key
      mode: 0600
      user:
        id: 0
      group:
        id: 0
      contents:
        inline: |
          ${indent(10, sealed_secrets_key)}

    - path: /usr/local/bin/install-initial-sealed-secrets-key.sh
      mode: 0750
      contents:
        inline: |
          #!/bin/bash
          set -e
          set -o pipefail

          export HOME=/root
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

          kubectl -n kube-system create secret tls sealed-secrets-initial-cert --cert="/var/tmp/sealed-secrets.crt" --key="/var/tmp/sealed-secrets.key"
          kubectl -n kube-system label secret sealed-secrets-initial-cert sealedsecrets.bitnami.com/sealed-secrets-key=active
    %{ endif }

  links:
    - path: /usr/local/bin/kubectl
      target: /usr/local/bin/k3s

systemd:
  units:
    - name: "install-os-extensions.service"
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s dependencies
        Wants=network-online.target
        After=network-online.target
        Before=zincati.service k3s.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=rpm-ostree install --allow-inactive --assumeyes --reboot container-selinux selinux-policy-base k3s-selinux qemu-guest-agent ${join(" ", os_extensions_rpm_names)}
        ExecStart=/bin/touch /var/lib/%N.stamp

        [Install]
        WantedBy=multi-user.target
    
    - name: var-lib-rancher-k3s-server.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount k3s server directory
        Before=k3s.service

        [Mount]
        What=${etcd_nfs_host}:${etcd_nfs_path}
        Where=/var/lib/rancher/k3s/server
        Type=nfs

        [Install]
        WantedBy=multi-user.target

    - name: "k3s.service"
      enabled: true
      contents: |
        [Unit]
        Description=Run K3s
        Wants=network-online.target rpc-statd.service
        After=network-online.target rpc-statd.service

        [Service]
        Type=notify
        EnvironmentFile=-/etc/default/%N
        EnvironmentFile=-/etc/sysconfig/%N
        EnvironmentFile=-/etc/systemd/system/%N.env
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity
        TasksMax=infinity
        TimeoutStartSec=0
        Restart=always
        RestartSec=5s
        ExecStartPre=-/sbin/modprobe br_netfilter
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/usr/local/bin/k3s server

        [Install]
        WantedBy=multi-user.target

    %{~ if init_cluster == true ~}
    - name: helm-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install helm
        Wants=network-online.target
        After=network-online.target
        ConditionPathExists=!/usr/local/bin/helm

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/helm-install.sh

        [Install]
        WantedBy=multi-user.target
    %{ endif }

    %{~ if init_cluster == true ~}
    - name: kubeseal-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install helm
        Wants=network-online.target
        After=network-online.target
        ConditionPathExists=!/usr/local/bin/kubeseal

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/kubeseal-install.sh

        [Install]
        WantedBy=multi-user.target
    %{ endif }

    %{~ if init_cluster == true ~}
    - name: cilium-install.service
      enabled: ${init_cluster}
      contents: |
        [Unit]
        Description=Install cilium
        Wants=network-online.target
        After=network-online.target k3s.service
        ConditionPathExists=!/usr/local/bin/cilium

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/cilium-install.sh

        [Install]
        WantedBy=multi-user.target
    %{ endif }

    %{~ if init_cluster == true ~}
    - name: fleet-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install fleet
        Wants=network-online.target
        After=network-online.target cilium-install.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/fleet-install.sh
        ExecStart=/bin/touch /var/lib/%N.stamp

        [Install]
        WantedBy=multi-user.target
    %{ endif }

    %{~ if init_cluster == true && sealed_secrets_cert != "" && sealed_secrets_key != "" ~}
    - name: sealed-secrets-initial-key.service
      enabled: true
      contents: |
        [Unit]
        Description=Install initial key for sealed-secrets
        Wants=network-online.target
        After=network-online.target cilium-install.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/install-initial-sealed-secrets-key.sh
        ExecStart=/bin/touch /var/lib/%N.stamp

        [Install]
        WantedBy=multi-user.target
    %{ endif }
